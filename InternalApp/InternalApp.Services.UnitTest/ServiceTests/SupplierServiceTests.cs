// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SupplierServiceTests.cs" company="">
//   Copyright 2015
// </copyright>
// <summary>
//   Autogenerated Web Services
// </summary>
// --------------------------------------------------------------------------------------------------------------------
namespace InternalApp.Services.UnitTest
{
	using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Entities;
    using Repository;
    using global::Repository.Pattern.Repositories;
    
	using NUnit.Framework;   
    using Moq;

	/// <summary>
    /// The supplier unit tests.
    /// </summary>
    [TestFixture]
    public class SupplierServiceTests
    {
        private readonly Mock<ISupplierRepository> supplierRepository;
        private readonly SupplierService supplierService;
        public SupplierServiceTests()
        {
            supplierRepository = new Mock<ISupplierRepository>();
            supplierService = new SupplierService(supplierRepository.Object);
        }
        [Test]
        public void Delete_With_ObjectId_Tests()
        {
            supplierRepository.Setup(x => x.Delete(It.IsAny<object>()));
            supplierService.Delete(1);
            supplierRepository.VerifyAll();
        }

        [Test]
        public void Delete_With_Entity_Tests()
        {
            supplierRepository.Setup(x => x.Delete(It.IsAny<Supplier>()));
            supplierService.Delete(new Supplier() { });
            supplierRepository.VerifyAll();
        }

        [Test]
        public void Queryable_Tests()
        {
            IQueryable<Supplier> supplier = null;
            supplierRepository.Setup(x => x.Queryable()).Returns(supplier);
            supplierService.Queryable();
            supplierRepository.VerifyAll();
        }

        [Test]
        public void Insert_Entity_Tests()
        {
            supplierRepository.Setup(x => x.Insert(It.IsAny<Supplier>()));
            supplierService.Insert(new Supplier() { });
            supplierRepository.VerifyAll();
        }

		[Test]
        public void Update_Tests()
        {
            supplierRepository.Setup(x => x.Update(It.IsAny<Supplier>()));
            supplierService.Update(new Supplier() { });
            supplierRepository.VerifyAll();
        }

        [Test]
        public void UpdateRange_Tests()
        {
            IEnumerable<Supplier> supplier = null;
            supplierRepository.Setup(x => x.UpdateRange(supplier));
            supplierService.UpdateRange(supplier);
            supplierRepository.VerifyAll();
        }       

		[Test]
        public void InsertRange_Entity_Tests()
        {
            IQueryable<Supplier> supplier = null;
            supplierRepository.Setup(x => x.InsertRange(supplier));
            supplierService.InsertRange(supplier);
            supplierRepository.VerifyAll();
        }

        [Test]
        public void Find_Tests()
        {
            Supplier supplier = new Supplier();
            supplierRepository.Setup(x => x.Find(It.IsAny<Supplier>())).Returns(supplier);
            supplierService.Find(new Supplier() { });
            supplierRepository.VerifyAll();
        }

        [Test]
        public void SelectQuery_Tests()
        {
            string query = "hi";
            IQueryable<Supplier> supplier = Enumerable.Empty<Supplier>().AsQueryable();
            supplierRepository.Setup(x => x.SelectQuery(It.IsAny<string>(), It.IsAny<Supplier>())).Returns(supplier);
            supplierService.SelectQuery(query, new Supplier() { });
            supplierRepository.VerifyAll();
        }        

        [Test]
        public void InsertOrUpdateGraph_Tests()
        {
            supplierRepository.Setup(x => x.InsertOrUpdateGraph(It.IsAny<Supplier>()));
            supplierService.InsertOrUpdateGraph(new Supplier() { });
            supplierRepository.VerifyAll();
        }

        [Test]
        public void InsertGraphRange_Tests()
        {
            IEnumerable<Supplier> supplier = null;
            supplierRepository.Setup(x => x.InsertGraphRange(supplier));
            supplierService.InsertGraphRange(supplier);
            supplierRepository.VerifyAll();
        }

        [Test]
        public void Query_With_Object_Tests()
        {
            IQueryObject<Supplier> supplier = null;
            IQueryFluent<Supplier> supplierFluent = null;
            supplierRepository.Setup(x => x.Query(supplier)).Returns(supplierFluent);
            supplierService.Query(supplier);
            supplierRepository.VerifyAll();
        }

        [Test]
        public void Query_With_Expression_Tests()
        {
            Expression<Func<Supplier, bool>> query = null;
            IQueryFluent<Supplier> supplierFluent = null;
            supplierRepository.Setup(x => x.Query(query)).Returns(supplierFluent);
            supplierService.Query(query);
            supplierRepository.VerifyAll();
        }

        [Test]
        public void FindAsync_Tests()
        {
            Task<Supplier> mockTask = new Task<Supplier>(() => new Supplier());
            supplierRepository.Setup(x => x.FindAsync(It.IsAny<Supplier>())).Returns(mockTask);
            supplierService.FindAsync(new Supplier() { });
            supplierRepository.VerifyAll();
        }

        [Test]
        public void FindAsync_With_CancellationToken_Tests()
        {
            CancellationToken ct;
            Task<Supplier> mockTask = new Task<Supplier>(() => new Supplier());
            supplierRepository.Setup(x => x.FindAsync(ct, It.IsAny<Supplier>())).Returns(mockTask);
            supplierService.FindAsync(ct, new Supplier() { });
            supplierRepository.VerifyAll();
        }

        [Test]
        public void DeleteAsync_Tests()
        {
            CancellationToken ct;
            supplierRepository.Setup(x => x.DeleteAsync(ct, It.IsAny<Supplier>())).Returns(new Task<bool>(() => false));
            supplierService.DeleteAsync(new Supplier() { });
            supplierRepository.VerifyAll();
        }

        [Test]
        public void DeleteAsync_With_CancellationToken_Tests()
        {
            CancellationToken ct;
            supplierRepository.Setup(x => x.DeleteAsync(ct, It.IsAny<Supplier>())).Returns(new Task<bool>(() => false));
            supplierService.DeleteAsync(ct, new Supplier() { });
            supplierRepository.VerifyAll();
        } 
	}

}
